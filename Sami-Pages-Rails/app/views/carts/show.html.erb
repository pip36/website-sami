<% @title = "Shopping Cart" %>

<div class='container'>
<h1 style='margin-top:30px'>Shopping Cart</h1>

<!-- The confirmation block displayed after siging in to paypal -->
<div class="order-confirm hidden">
  <div class="alert alert-info">
    Please confirm that the delivery address and order is correct, then press
    the button to complete your order.
  </div>
  <div class="delivery-address">
    <div>Delivery Address:</div>
    <div><span id="recipient"></span>, <span id="line1"></span>, <span id="city"></span></div>
    <div><span id="state"></span>, <span id="zip"></span>, <span id="country"></span></div>
  </div>
</div>

<!-- The thanks message after payment has been made -->
<div id="thanks" class="hidden alert alert-success" role="alert">
  Thanks, <span id="thanksname"></span> for your purchase! Your order will be
  delivered as soon as possible.
</div>

<!-- Displays each order, product info, and form for update and delete methods-->
<% @orders.each do |order| %>
  <%= form_for order, remote:true do |f| %>
  <%  product = Product.find_by(id: order.product_id) %>

  <div class='row cart-listing'>
<!-- Table displaying all the product information for the order item -->
    <div class="col-md-3 cart-item-info">
      <h3> Product </h3>
      <p><%= product.name %></p>
    </div>

    <div class="col-md-2 cart-item-info">
      <h3> Price </h3>
      <p><%= number_to_currency(product.unit_price, unit:'£') %></p>
    </div>

    <div class="col-md-2 cart-item-info">
      <h3> Quantity </h3>
      <span class='q-dropdown'><%= f.number_field(:quantity, in: 1.0..100.0, step: 1.0) %></span>
      <span class='q-confirm' style='display:none'> <%= order.quantity %> </span>
    </div>

    <div class="col-md-2 cart-item-info">
      <h3> Subtotal </h3>
      <%= number_to_currency(order.subtotal, unit:'£') %>
    </div>

    <div class='col-md-3 cart-item-info edit-links'>
<!-- These are the links for deleting/ editing orders -->

        <%= link_to "Remove Item", order_item_url(order), method: :delete,
                                   data:{confirm: "Are you sure?"}, remote:true%>

        <br>
      <%= f.submit "Update Item", class:'submit-button'%>
    </div>
  </div>
  <% end %>
<% end %>



<!-- If the cart is not empty then this will display the total to pay
and also add the paypal button to the page -->
<% if @orders.length > 0 %>
<div class="info-block">
Total = <%= number_to_currency(@cart.total, unit:'£') %>
<div class="order-confirm hidden">
  <button id="confirmButton">Complete Payment</button>
</div>
<!-- The paypal button itself -->
<div id="paypal-button-container"></div>
<!-- This is displayed after logging onto paypal and confirming payment -->

<!-- This will be displayed after the payment is taken and order is compete -->

</div>
<!-- if the shopping cart has no items this will be displayed -->
<% else %>
  Your cart is empty!
<% end %>
</div>
<!-- This script handles the payment through paypal, demo and
documentation found at https://developer.paypal.com/demo/checkout/#/pattern/client -->
<script>

  // Render the PayPal button
  paypal.Button.render({

      // Set your environment
      env: 'sandbox', // sandbox | production

      style: {
          size: 'small',
          color: 'blue',
          shape: 'pill',
          label: 'checkout'
      },

      // Create a PayPal app: https://developer.paypal.com/developer/applications/create
      client: {
        sandbox:    'AeV0YsJsQbIRT-aJjjDc14nXntGVpUVtqMi7jVH72VQIi4nh1SmuR3RbCgIR2iWkyGINDe6zBXd4nRqL',
        production: 'AXTUgoZOvnOTLN7QENMCv7rokmz2q3JyH3NR74vkZSm_7IOOBynM-zWmZSAwU747JuZaiApOFrYeJKa6'
      },

      // Wait for the PayPal button to be clicked
      payment: function() {

          // Make a client-side call to the REST api to create the payment
          var order_total = <%= @cart.total.to_s %>;
          return paypal.rest.payment.create(this.props.env, this.props.client, {
                transactions: [
                    {
                        amount: { total: order_total, currency: 'GBP' }
                    }
                ]
            });
        },

      // Wait for the payment to be authorized by the customer
      onAuthorize: function(data, actions) {

          // Get the payment details
          return actions.payment.get().then(function(data) {

              // Display the payment details and a confirmation button
              var shipping = data.payer.payer_info.shipping_address;

              $('#recipient').text(shipping.recipient_name);
              $('#line1').text(shipping.line1);
              $('#city').text(shipping.city);
              $('#state').text(shipping.state);
              $('#zip').text(shipping.postal_code);
              $('#country').text(shipping.country_code);

              $('#paypal-button-container').hide();
              $('.edit-links').hide();
              $('.q-dropdown').hide();
              $('.q-confirm').css({display: "block"});
              $('.order-confirm').removeClass('hidden');
              // Listen for click on confirm button

              $('#confirmButton').click(function() {

                  // Disable the button and show a loading message

                  $('.order-confirm').text('Loading...');
                  document.querySelector('.order-confirm').disabled = true;

                  // Execute the payment

                  return actions.payment.execute().then(function() {

                      // Show a thank-you note

                     document.querySelector('#thanksname').innerText = shipping.recipient_name;

                      $('.order-confirm').addClass('hidden');
                      $('#thanks').removeClass('hidden');

                      // Empty shopping cart
                      //<%= empty_cart %>
                  });
              });
          });
      }

  }, '#paypal-button-container');
</script>
